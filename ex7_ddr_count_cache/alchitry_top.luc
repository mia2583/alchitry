module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    /* DDR3 Connections */
    inout ddr3_dq[16],
    inout ddr3_dqs_n[2],
    inout ddr3_dqs_p[2],
    output ddr3_addr[14],
    output ddr3_ba[3],
    output ddr3_ras_n,
    output ddr3_cas_n,
    output ddr3_we_n,
    output ddr3_reset_n,
    output ddr3_ck_p,
    output ddr3_ck_n,
    output ddr3_cke,
    output ddr3_cs_n,
    output ddr3_dm[2],
    output ddr3_odt
) {
    // clock generator takes 100MHz in and creates 100MHz + 200MHz
    clk_wiz_0 clk_wiz(.resetn(rst_n), .clk_in(clk))
    
    // DDR3 Interface - connect inouts directly
    mig_wrapper mig (
        .ddr3_dq(ddr3_dq),
        .ddr3_dqs_n(ddr3_dqs_n),
        .ddr3_dqs_p(ddr3_dqs_p),
        .sys_rst(!clk_wiz.locked), // reset when clk_wiz isn't locked
        .sys_clk(clk_wiz.clk_out1), // 100MHz clock
        .clk_ref(clk_wiz.clk_out2)  // 200MHz clock
    )
    
    sig rst = mig.sync_rst // use the reset signal from the mig core
    
    enum State {WRITE_DATA, WRITE_CMD, READ_CMD, WAIT_READ, DELAY}
    
    .clk(mig.ui_clk) {
        .rst(rst) {
            dff state[$width(State)]
            dff ctr[24]
            dff address[8]
            dff led_reg[8]
            
            lru_cache cache(#ENTRIES(1), #WORD_SIZE(8), #AGE_BITS(1))
        }
    }
    
    always {
        /* DDR3 Connections */
        ddr3_addr = mig.ddr3_addr
        ddr3_ba = mig.ddr3_ba
        ddr3_ras_n = mig.ddr3_ras_n
        ddr3_cas_n = mig.ddr3_cas_n
        ddr3_we_n = mig.ddr3_we_n
        ddr3_reset_n = mig.ddr3_reset_n
        ddr3_ck_p = mig.ddr3_ck_p
        ddr3_ck_n = mig.ddr3_ck_n
        ddr3_cke = mig.ddr3_cke
        ddr3_cs_n = mig.ddr3_cs_n
        ddr3_dm = mig.ddr3_dm
        ddr3_odt = mig.ddr3_odt
        
        mig.mem_in = cache.mem_in
        cache.mem_out = mig.mem_out
        
        // default values
        cache.flush = 0 // don't need to flush
        cache.wr_addr = address.q
        cache.wr_data = address.q
        cache.wr_valid = 0
        cache.rd_addr = address.q
        cache.rd_cmd_valid = 0
        
        led = led_reg.q  // set leds to show led_reg value
        
        usb_tx = usb_rx  // echo the serial data
        
        case (state.q) {
            State.WRITE_DATA:
                if (cache.wr_ready) {
                    cache.wr_valid = 1
                    address.d = address.q + 1
                    if (address.q == 8hFF) {
                        state.d = State.READ_CMD
                        address.d = 0
                    }
                }
            
            State.READ_CMD:
                if (cache.rd_ready) {
                    cache.rd_cmd_valid = 1
                    state.d = State.WAIT_READ
                }
            
            State.WAIT_READ:
                if (cache.rd_data_valid) {
                    led_reg.d = cache.rd_data
                    state.d = State.DELAY
                    address.d = address.q + 1
                }
            
            State.DELAY:
                ctr.d = ctr.q + 1 // delay so we can see the value
                if (&ctr.q) {
                    state.d = State.READ_CMD
                }
        }
    }
}
